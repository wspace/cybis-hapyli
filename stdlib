
;;; IO 
;;; ========================================

asm print-number (n) = (dup pn)
asm print-char (c) = (dup pc)

def print-string (*str) = (do (__print-string__ (+ *str 1) (ref *str))
                              *str)

def __print-string__ (*rest chr) = (if (== chr 0) 
                                       0
                                       (do (print-char chr)
                                           (__print-string__ (+ *rest 1) (ref *rest))))

asm read-number (*n) = (dup rn load)
asm read-char (*c) = (dup rc load)

var *__stdlib-io-buffer__ = (0)
def read-number () = (read-number *__stdlib-io-buffer__)
def read-char () = (read-char *__stdlib-io-buffer__)

def read-string (*buffer nchars) = (do (if (or (== (read-char *buffer) '\n')
                                               (== nchars 0))
                                           (set *buffer 0)
                                           (read-string (+ *buffer 1) (- nchars 1)))
                                       *buffer)

def read-string (nchars) = (read-string (alloc (+ nchars 1)) nchars)

def read-string () = (alloc (__read-dynamic-string__ (ref 0)))
def __read-dynamic-string__ (*unallocated) = (if (== (read-char *unallocated) '\n')
                                                 (do (set *unallocated 0) 1)
                                                 (+ 1 (__read-dynamic-string__ (+ *unallocated 1))))

; STRING MANAGEMENT 
; ========================================
                
def string-length (*str) = (if (== (ref *str) 0)
                               0
                               (+ 1 (string-length (+ *str 1))))

def concat (*str1 *str2) = (__concat__ *str1 
                                       *str2 
                                       (string-length *str1) 
                                       (string-length *str2))

def __concat__ (*str1 *str2 len1 len2) = (__concat__ *str1 
                                                     *str2 
                                                     len1 
                                                     len2 
                                                     (alloc (+ (+ len1 len2) 1)))

def __concat__ (*str1 *str2 len1 len2 *dest) = (do (copy *dest *str1 len1)
                                                   (copy (+ *dest len1) *str2 len2)
                                                   (set *dest (+ len1 len2) 0)
                                                   *dest)


; HEAP MANAGEMENT 
; ========================================

def alloc (size) = (__alloc__ size (ref 0))
def __alloc__ (size heapPtr) = (do (set 0 (+ heapPtr size))
                                   (set (+ heapPtr size) 0)
                                   heapPtr)

asm ref (*obj) = (load)
asm ref (*obj index) = (add load)

asm set (*obj value) = (store push 0)
def set (*obj index value) = (set (+ *obj index) value)

def copy (*dest *src count) = (do (__copy__ *dest *src count)
                                  *dest)
                                  
def __copy__(*dest *src count) = (if (== count 0) 
                                     0
                                     (do (set *dest (ref *src))
                                         (__copy__ (+ *dest 1) (+ *src 1) (- count 1))))


; ARITHMETIC
; ========================================

asm + (a b) = (add)
asm - (a b) = (sub)

asm - (a) = (
    push 0 
    swap 
    sub
)

asm * (a b) = (mul)
asm / (a b) = (div)
asm % (a b) = (mod) 



; COMPARISON
; ========================================

def > (a b) = (< b a)
def >= (a b) = (<= b a)
def == (a b) = (not (!= a b))
asm != (a b) = (sub)
def <= (a b) = (or (< a b) (== a b))
def < (a b) = (__<__ a b)

asm __<__ (a b) = (
    
    sub                 ; x = a - b

    jn __<__true        ; if not x < 0:

    push 0              ;   return 0
    jump __<__end       
    
    label __<__true     ; else
    push 1              ;   return 1
    
    label __<__end
)


; LOGIC
; ========================================

def and (a b) = (if a (if b b 0) 0)
def or (a b) = (if a a b)
def not (a) = (if a 0 1)



; FLOW CONTROL
; ========================================

asm do (a) = ()
asm do (a b) = (slide 1)
asm do (a b c) = (slide 2)
asm do (a b c d) = (slide 3)
asm do (a b c d e) = (slide 4)
asm do (a b c d e f) = (slide 5)
asm do (a b c d e f g) = (slide 6)
asm do (a b c d e f g h) = (slide 7)
asm do (a b c d e f g h i) = (slide 8)
asm do (a b c d e f g h i j) = (slide 9)

